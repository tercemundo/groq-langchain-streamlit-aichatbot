import streamlit as st  # Importing the Streamlit library for creating web apps
import os  # Importing the os library to interact with the operating system
from groq import Groq  # Importing Groq for AI model interaction
import random  # Importing the random library for generating random numbers

from langchain.chains import ConversationChain  # Importing ConversationChain for managing chat conversations
from langchain.chains.conversation.memory import ConversationBufferWindowMemory  # Importing ConversationBufferWindowMemory for conversation memory management
from langchain_groq import ChatGroq  # Importing ChatGroq for Groq chat functionality
from langchain.prompts import PromptTemplate  # Importing PromptTemplate for managing chat prompts


def main():
    """
    This function is the main entry point of the application. It sets up the Groq client, the Streamlit interface, and handles the chat interaction.
    """
    
    # Get Groq API key from environment variables
    groq_api_key = os.environ['GROQ_API_KEY']

    # Display the Groq logo using Streamlit columns for layout
    spacer, col = st.columns([5, 1])  
    with col:  
        st.image('groqcloud_darkmode.png')  # Displaying an image in the specified column

    # The title and greeting message of the Streamlit application
    st.title("Chat with Groq!")  # Setting the title of the web app
    st.write("Hello! I'm your friendly Groq chatbot. I can help answer your questions, provide information, or just chat. I'm also super fast! Let's start our conversation!")  # Displaying a greeting message

    # Add customization options to the sidebar for model selection and memory length
    st.sidebar.title('Customization')  # Setting the title for the sidebar section
    model = st.sidebar.selectbox(
        'Choose a model',  # Dropdown for model selection
        ['mixtral-8x7b-32768', 'llama2-70b-4096']
    )
    conversational_memory_length = st.sidebar.slider('Conversational memory length:', 1, 10, value = 5)  # Slider for selecting conversational memory length

    memory=ConversationBufferWindowMemory(k=conversational_memory_length)  # Initializing conversation memory with the selected length

    user_question = st.text_input("Ask a question:")  # Input field for user to ask a question

    # session state variable for storing chat history
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history=[]  # Initializing chat history if not present
    else:
        for message in st.session_state.chat_history:
            memory.save_context({'input':message['human']},{'output':message['AI']})  # Saving previous chat context to memory


    # Initialize Groq Langchain chat object and conversation
    groq_chat = ChatGroq(
            groq_api_key=groq_api_key, 
            model_name=model  # Initializing the chat object with the selected model
    )

    conversation = ConversationChain(
            llm=groq_chat,
            memory=memory  # Setting up the conversation chain with the chat object and memory
    )

    # If the user has asked a question,
    if user_question:
        
        # The chatbot's answer is generated by sending the full prompt to the Groq API.
        response = conversation(user_question)  # Generating response from the conversation object
        message = {'human':user_question,'AI':response['response']}  # Structuring the message
        st.session_state.chat_history.append(message)  # Appending the message to chat history
        st.write("Chatbot:", response['response'])  # Displaying the chatbot's response

if __name__ == "__main__":
    main()





